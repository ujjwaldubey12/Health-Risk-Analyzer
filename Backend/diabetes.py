# -*- coding: utf-8 -*-
"""diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vyx0qIn6YzwTkt6_qlmRNED1wUZoKbt8

## Dataset Loading
"""

#Importing required libraries
import numpy as np
import pandas as pd

import matplotlib
from matplotlib import pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
import sklearn.metrics as metrics

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC

# importing Flask and other modules
from flask import Flask, request, render_template, send_from_directory
 
# Flask constructor
app = Flask(__name__)  

#Load the dataset
diabetes_df = pd.read_csv('diabetes.csv')

#Count of number of rows and columns
diabetes_df.shape

#Statistical measures of numeric columns in the DataFrame.
diabetes_df.describe()

#To know if there are any null values in the dataset
diabetes_df.info()

#To know the type of entries in each column
occur = diabetes_df.groupby(['Outcome']).size()
# display(occur)

"""## Exploratory Data Analysis"""

# 
# diabetes_df.hist(bins=10, figsize=(10,10))
# plt.show()

# sns.heatmap(diabetes_df.corr(), annot=True,cmap='crest')
# plt.show()

# sns.pairplot(diabetes_df, hue='Outcome')
# plt.show()

"""## Machine Learning Model: """

X = diabetes_df.drop('Outcome', axis=1)
Y = diabetes_df['Outcome']

# Split dataset into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

"""### Logistic Regression:"""

# Creating a Logistic Regression model: 
log_reg = LogisticRegression()

log_reg.fit(X_train, Y_train)

Y_pred = log_reg.predict(X_test)

# accuracy = accuracy_score(Y_test, Y_pred)
# print("Accuracy:", accuracy)

"""### Random Forest Classifier:"""

model = RandomForestClassifier(n_estimators=300, bootstrap = True, max_features = 'sqrt')

model.fit(X_train, Y_train)

Y_pred = model.predict(X_test)
print('Accuracy of Random Forest on test set: {:.2f}'.format(model.score(X_test, Y_test)))

print('F1_Score for Random Forest is:',metrics.f1_score(Y_test, Y_pred, average="macro"))
print('Precision_score for Random Forest is is:',metrics.precision_score(Y_test, Y_pred, average="macro"))
print('Recall_Score for Random Forest is:',metrics.recall_score(Y_test, Y_pred, average="macro"))

"""### Support Vector Machine (Kernel: rbf):"""

classifier_rbf = SVC(kernel = 'rbf')
classifier_rbf.fit(X_train, Y_train)

Y_pred = classifier_rbf.predict(X_test)

print('Accuracy of SVC on test set: {:.2f}'.format(classifier_rbf.score(X_test, Y_test)))

print('F1_Score for SVC is:', metrics.f1_score(Y_test, Y_pred, average="macro"))
print('Precision_score for SVC is is:',metrics.precision_score(Y_test, Y_pred, average="macro"))
print('Recall_Score for SVC is:',metrics.recall_score(Y_test, Y_pred, average="macro"))

@app.route('/diabetes', methods =["GET", "POST"])
def diabetes():
    print("Serving")
    if request.method == "POST":
        # getting input with name = fname in HTML form
        para_value_a = request.form.get("")
        print(request.form)
        l = []
        for key,value in request.form.to_dict(flat=False).items():
            print (key, type(value))
            l += value
        diabetes_result= model.predict([l])
        if diabetes_result == [0]  :
            return "Our prediction model suggests that you don't have a Diabetes. Nevertheless, we recommend that you speak to a healthcare professional if you have any concerns about your health."
            # return "Your result is:" + str(rfc.predict([l]))
        else:
            return "Based on the information you provided, our preliminary screening tool indicates that you may have a Diabetes. Please seek medical advice from a qualified healthcare professional for further evaluation and testing."

@app.route('/<path:path>', methods =["GET", "POST"])
def paraphrase(path):
    print("Serving 2")
    print(path)
    return send_from_directory("Front end", path)


if __name__=='__main__':
   app.run(debug=True)




